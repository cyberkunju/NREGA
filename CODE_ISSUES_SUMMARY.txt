================================================================================
SPECIFIC CODE ISSUES WITH LINE NUMBERS
================================================================================

Issue #1: TITLE CASE TRANSFORMATION (data-transformer.js:222-224)
----------------------------------------------------------------------
PROBLEM: Converts ALL CAPS state/district names to Title Case
CODE:
  value = value.split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');

EXAMPLE:
  Input (from API):  "MADHYA PRADESH"
  Output (in DB):    "Madhya Pradesh"
  
IMPACT:
  - API uses ALL CAPS consistently
  - May break name matching with external data
  - Inconsistent with source data format

FIX: Don't apply title case to state/district names from API


Issue #2: FIELD NAME MISMATCH (dataCleaner.js:72)
----------------------------------------------------------------------
PROBLEM: Looks for wrong field name when calculating women participation
CODE:
  const womenPersondays = parseFloat(record.women_persondays || 0);
  
WHAT API PROVIDES:
  "Women_Persondays": "288446"  (camelCase)
  
WHAT CODE LOOKS FOR:
  record.women_persondays       (snake_case - doesn't exist!)

IMPACT:
  womenPersondays always 0
  women_participation_percent calculation always fails

FIX:
  const womenPersondays = parseFloat(record.Women_Persondays || 0);


Issue #3: STRICT VALIDATION REJECTS RECORDS (data-transformer.js:288-291)
----------------------------------------------------------------------
PROBLEM: Rejects records with payment % > 100 instead of capping
CODE:
  if (typeof record.payment_percentage_15_days !== 'number' || 
      record.payment_percentage_15_days < 0 || 
      record.payment_percentage_15_days > 100) {
    errors.push('payment_percentage_15_days must be between 0 and 100');
  }

EXAMPLE FROM SAMPLE DATA:
  Many districts have payment_percentage: 0
  Some may have > 100 (requires capping)

IMPACT:
  Valid records are rejected instead of being fixed
  Data loss due to over-validation

FIX:
  Cap the value instead of rejecting:
  if (paymentPercentage > 100) paymentPercentage = 100;
  if (paymentPercentage < 0) paymentPercentage = 0;


Issue #4: LIMITED DATABASE SCHEMA (backend/db/init.sql:28-38)
----------------------------------------------------------------------
PROBLEM: Database only stores 7 fields when API provides 36

CURRENT SCHEMA:
  monthly_performance table:
    - id (SERIAL PRIMARY KEY)
    - district_name
    - month
    - fin_year
    - total_households_worked
    - avg_days_employment_per_hh
    - payment_percentage_15_days
    - last_updated

UPSERT QUERY (data-loader.js:140-156):
  Only inserts these 7 fields, ignoring 29 other fields

IMPACT:
  91.7% of available data is discarded
  Cannot generate comprehensive analytics
  Wastes rich government data

FIX:
  ALTER TABLE monthly_performance ADD COLUMN
    women_persondays BIGINT,
    sc_persondays BIGINT,
    st_persondays BIGINT,
    wages DECIMAL(15,2),
    total_expenditure DECIMAL(15,2),
    ... (add more fields)


Issue #5: API FIELD TYPO NOTED BUT NOT DOCUMENTED
----------------------------------------------------------------------
PROBLEM: API field has typo, code handles it but not documented

API FIELD NAME:
  percentage_payments_gererated_within_15_days
  
TYPO:
  "gererated" should be "generated"

CODE HANDLING (data-transformer.js:197-202):
  const value = record.percentage_payments_gererated_within_15_days ||
                record.payment_percentage_15_days || 
                record.paymentPercentage15Days || 
                record.payment_percentage;

IMPACT:
  Works but looks like a bug
  Should be documented why this field name is used


Issue #6: NO STATE CODE OR DISTRICT CODE STORED
----------------------------------------------------------------------
PROBLEM: API provides state_code and district_code, not stored

API FIELDS:
  "state_code": "17"
  "district_code": "1752"

NOT STORED IN DATABASE:
  - No state_code column
  - No district_code column

IMPACT:
  Cannot use numeric codes for efficient joins
  No standardized identifiers
  Harder to link with other datasets


Issue #7: MISSING WOMEN PARTICIPATION CALCULATION
----------------------------------------------------------------------
PROBLEM: women_participation_percent is calculated but not stored

CODE (dataCleaner.js:69-85):
  function calculateWomenParticipation(record) {
    const womenPersondays = parseFloat(record.Women_Persondays || 0);  // BUG: wrong field!
    const totalPersondays = parseFloat(record.persondays_of_central_liability_so_far || 0);
    const percentage = (womenPersondays / totalPersondays) * 100;
    return Math.max(0, Math.min(percentage, 100));
  }

CALCULATION NOT STORED:
  - Not in database schema
  - Cannot query historical women's participation
  - Must recalculate every time

FIX:
  1. Fix field name mismatch (Issue #2)
  2. Add women_participation_percent column to database
  3. Store calculated value during ETL


Issue #8: INCONSISTENT DATA TYPES
----------------------------------------------------------------------
PROBLEM: API returns strings, code converts to numbers, DB stores as DECIMAL

API RESPONSE (strings):
  "Total_Households_Worked": "17219"
  "percentage_payments_gererated_within_15_days": "99.92"

TRANSFORMATION (data-transformer.js):
  TotalHouseholds = parseNumber(value)  // Becomes number

DATABASE (DECIMAL):
  total_households_worked INTEGER
  payment_percentage_15_days DECIMAL(8,2)

IMPACT:
  Works correctly but implicit conversion
  Large numbers might overflow INTEGER
  Some values are very precise (many decimals)


Issue #9: TITLE CASE APPLIED TO STATE NAMES
----------------------------------------------------------------------
PROBLEM: State names transformed inconsistently

CODE (data-transformer.js:147-158):
  function extractStateName(record) {
    const apiState = record.state_name || record.stateName || record.state;
    if (apiState && apiState.trim() !== '') {
      return cleanString(apiState);  // Applies title case!
    }
  }

EXAMPLE:
  API:       "MADHYA PRADESH", "UTTAR PRADESH", "WEST BENGAL"
  Database:  "Madhya Pradesh", "Uttar Pradesh", "West Bengal"

IMPACT:
  Inconsistent with source
  May break lookups
  Harder to match with other datasets using ALL CAPS


Issue #10: FALLBACK TO GEOJSON MAPPING
----------------------------------------------------------------------
PROBLEM: Code falls back to district-state mapping when state missing

CODE (data-transformer.js:156-158):
  // Priority 2: Fallback to GeoJSON mapping if API doesn't provide state
  const { getStateForDistrict } = require('./district-state-mapping');
  return getStateForDistrict(record.district_name || '');

FALLBACK FILE:
  district-state-mapping.json
  - 737 districts mapped
  - Keys are lowercase
  - Used when API state_name missing

IMPACT:
  Adds complexity
  May have inconsistencies
  Two sources of truth for state mapping


SUMMARY OF FIXES NEEDED
================================================================================

1. Fix dataCleaner.js line 72: Change women_persondays to Women_Persondays
2. Remove title case transformation for API data (data-transformer.js:222-224)
3. Expand database schema to add 15-20 missing columns
4. Cap instead of reject payment % > 100 (data-transformer.js:288-291)
5. Add state_code and district_code to database
6. Store calculated women_participation_percent
7. Document API field typo
8. Use BIGINT for large counters, DECIMAL(15,2) for financial fields

PRIORITY: Issues #2 and #4 are critical data quality issues.
         Issue #1 prevents women participation calculation.
         Issue #3 is the biggest data loss.
